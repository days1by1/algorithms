package leetcode.daily_question;

import java.util.ArrayList;
import java.util.List;

/**
 * 928. 尽量减少恶意软件的传播 II
 * 难度：困难
 *
 * @author wangbo
 * @created 2024年04月17日 23:01
 */
public class No928_MinMalwareSpread {

    private static int size;

    public static void main(String[] args) {
        int[][] graph = {{1, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 1, 0, 0, 0, 0, 0, 0, 1}, {0, 0, 1, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 1, 0, 0, 0, 0, 1}, {0, 0, 0, 0, 1, 0, 1, 1, 1}, {0, 0, 0, 0, 0, 1, 0, 0, 1}, {0, 0, 0, 0, 1, 0, 1, 1, 0}, {0, 0, 0, 0, 1, 0, 1, 1, 0}, {0, 1, 0, 1, 1, 1, 0, 0, 1}};
        int[] initial = {8, 4, 2, 0};
        System.out.println(minMalwareSpread(graph, initial));
    }

    public static int minMalwareSpread(int[][] graph, int[] initial) {
        int n = graph.length;
        boolean[] vis = new boolean[n];
        int ans = 0, minSize = Integer.MAX_VALUE;
        for (int i : initial) {
            size = 0;
            List<Integer> edges = new ArrayList<>();
            // 断开连接
            for (int j = 0; j < graph[i].length; j++) {
                if (graph[i][j] == 1) {
                    edges.add(j);
                    graph[i][j] = 0;
                    graph[j][i] = 0;
                }
            }
            for (int j : initial) {
                if (j == i || vis[j]) {
                    continue;
                }
                dfs(j, graph, vis);
            }
            System.out.println("size = " + i + ", i = " + i);
            if (size < minSize || size == minSize && i < ans) {
                ans = i;
                minSize = size;
            }
            // 恢复连接
            for (int j : edges) {
                graph[i][j] = 1;
                graph[j][i] = 1;
            }
        }

        return ans;
    }

    public static void dfs(int i, int[][] graph, boolean[] vis) {
        vis[i] = true;
        size++;
        for (int j = 0; j < graph[i].length; j++) {
            if (graph[i][j] == 1 && !vis[j]) {
                dfs(j, graph, vis);
            }
        }
    }

}

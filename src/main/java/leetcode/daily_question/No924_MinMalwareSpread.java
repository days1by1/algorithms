package leetcode.daily_question;

/**
 * 924. 尽量减少恶意软件的传播
 * 难度：困难
 * 标签：DFS、图、并查集
 *
 * @author wangbo
 * @created 2024年04月16日 20:49
 */
public class No924_MinMalwareSpread {

    private static int nodeId, size;

    public static void main(String[] args) {
        int[][] graph = {{1, 1, 0}, {1, 1, 0}, {0, 0, 1}};
        int[] initial = {0, 1};
        System.out.println("minMalwareSpread: " + minMalwareSpread(graph, initial));
        System.out.println("minMalwareSpread2: " + minMalwareSpread(graph, initial));

        int[][] graph2 = {{1, 0, 0, 0}, {0, 1, 0, 0}, {0, 0, 1, 1}, {0, 0, 1, 1}};
        int[] initial2 = {3, 1};
        System.out.println("minMalwareSpread: " + minMalwareSpread(graph2, initial2));
        System.out.println("minMalwareSpread2: " + minMalwareSpread(graph2, initial2));
    }

    // 灵茶山艾府题解：DFS
    public static int minMalwareSpread(int[][] graph, int[] initial) {
        int n = graph.length;
        boolean[] vis = new boolean[n];
        boolean[] isInitial = new boolean[n];
        int min = Integer.MAX_VALUE;
        for (int i : initial) {
            isInitial[i] = true;
            min = Math.min(min, i);
        }

        int ans = -1, maxSize = 0;
        for (int i : initial) {
            if (vis[i]) continue;
            nodeId = -1;
            size = 0;
            dfs(i, graph, vis, isInitial);
            if (nodeId >= 0 && (size > maxSize || size == maxSize && nodeId < ans)) {
                ans = nodeId;
                maxSize = size;
            }
        }
        return ans < 0 ? min : ans;
    }

    public static void dfs(int i, int[][] graph, boolean[] vis, boolean[] isInitial) {
        vis[i] = true;
        size++;
        if (nodeId != -2 && isInitial[i]) {
            nodeId = nodeId == -1 ? i : -2;
        }
        for (int j = 0; j < graph[i].length; j++) {
            if (graph[i][j] == 1 && !vis[j]) {
                dfs(j, graph, vis, isInitial);
            }
        }
    }

    // ylb题解：并查集
    public static int minMalwareSpread2(int[][] graph, int[] initial) {
        int n = graph.length;
        UnionFind uf = new UnionFind(n);
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (graph[i][j] == 1) uf.union(i, j);
            }
        }

        int ans = n;
        int minIdx = n, maxSize = 0;
        int[] cnt = new int[n];
        for (int x : initial) {
            cnt[uf.find(x)]++;
            minIdx = Math.min(minIdx, x);
        }

        for (int x : initial) {
            int root = uf.find(x);
            if (cnt[root] == 1) {
                int size = uf.size(x);
                if (size > maxSize || (size == maxSize && x < ans)) {
                    ans = x;
                    maxSize = size;
                }
            }
        }

        return ans == n ? minIdx : ans;
    }

    private static class UnionFind {
        private static int[] p;
        private static int[] size;

        public UnionFind(int n) {
            p = new int[n];
            size = new int[n];
            for (int i = 0; i < n; i++) {
                p[i] = i;
                size[i] = 1;
            }
        }

        public int find(int x) {
            return x == p[x] ? x : (p[x] = find(p[x]));
        }

        public void union(int a, int b) {
            int pa = find(a), pb = find(b);
            if (pa == pb) return;
            if (pa > pb) {
                p[pb] = pa;
                size[pa] += size[pb];
            } else {
                p[pa] = pb;
                size[pb] += size[pa];
            }
        }

        public int size(int x) {
            return size[x];
        }
    }

}